Завдання:
1. взяти масив posts з arrays.js (1169 рядок в файлі) який лежить в корені папки react, зробити
під його об'єкти компонент, проітерувати, викликавши компонент і передавши в нього данні.
Зробити це в App компоненті.
2. Реорганізувати код і структуру, перемістивши ітерацію в окремий компонент PostsComponent.
3. Замінити масив на виклик через fetch без useEffect та useState показати та пояснити наслідки
4. Додати useEffect та useState показати як тепер все працює
5. Зробити біля кожного поста конопку, показати івен клік.
6. Показати стейт ліфтінг. При кліку на кнопку відобразити обраний пост в компоненті верхнього рівня (Арр)


Відповіді:
1. Взяв масив posts з arrays.js, зробив з ним компонент(псевдо БД) PostsUsersDB,
   в App.js викликав цей масив, проітерував та вивів дані з масиву. Закомітив.
2. Перемістив ітерацію в окремий компонент Posts, також зробив розмітку через компонент Post.
   Закомітив у Posts ітерацію.
3. Замінив масив на виклик через fetch, без хуків виходить що інформація приходить але не можна її
   відобразити, тому що fetch робить асинхронний запит. Інформація ще не прийшла, а сторінка
   вже відрендерилась і другий раз не переренджується.
4. Додав useState, сторінка відрендерилась але в нетворку постійнно робиться запит. useState постійно робить запит
   отримує відповідь та заново переренджує компонент. За допомогою useEfect можна зробити так щоб
   fetch запускався тільки один раз при запуску компоненти
5. Зробив біля кожного поста конопку, показав івен клік. Закомітив у Post.js
6. Зробив ліфтинг. В кожного поста є кнопка при кліку на яку даний пост відображається
   в компоненті верхнього рівня.